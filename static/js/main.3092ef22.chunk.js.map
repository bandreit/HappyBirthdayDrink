{"version":3,"sources":["images/party.svg","images/corp.png","images/mana.png","images/gura.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","rotate","setRotate","rotateMouth","setRotateMouth","top","setTop","disableButton","setDisableButton","className","src","body","alt","img","style","originX","zIndex","animate","transition","duration","hand","mouth","originY","div","scale","ease","times","loop","Infinity","repeatDelay","party","disabled","onClick","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,6OCmF5BC,MA1Ef,WAAgB,IAAD,EACeC,mBAAS,GADxB,mBACNC,EADM,KACEC,EADF,OAEyBF,mBAAS,GAFlC,mBAENG,EAFM,KAEOC,EAFP,OAGSJ,mBAAS,KAHlB,mBAGNK,EAHM,KAGDC,EAHC,OAI6BN,oBAAS,GAJtC,mBAINO,EAJM,KAISC,EAJT,KAuBb,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,WACb,yBAAKC,IAAKC,IAAMC,IAAI,OAAOH,UAAU,SACrC,kBAAC,IAAOI,IAAR,CACEC,MAAO,CAAEC,QAAS,GAAKC,QAAS,GAChCC,QAAS,CAAEhB,OAAQA,GACnBiB,WAAY,CAAEC,SAAU,GACxBT,IAAKU,IACLR,IAAI,OACJH,UAAU,SAEZ,kBAAC,IAAOI,IAAR,CACEH,IAAKW,IACLP,MAAO,CAAEC,QAAS,GAAKO,QAAS,IAChCL,QAAS,CAAEhB,OAAQE,GACnBe,WAAY,CAAEC,SAAU,GACxBP,IAAI,QACJH,UAAU,WAGd,kBAAC,IAAOc,IAAR,CACEd,UAAU,OACVQ,QAAS,CACPO,MAAO,CAAC,EAAG,IAAK,IAAK,EAAG,GACxBvB,OAAQ,CAAC,EAAG,EAAG,IAAK,IAAK,IAE3BiB,WAAY,CACVC,SAAU,EACVM,KAAM,YACNC,MAAO,CAAC,EAAG,GAAK,GAAK,GAAK,GAC1BC,KAAMC,IACNC,YAAa,IAGf,yBAAKnB,IAAKoB,IAAOlB,IAAI,WAEvB,yBAAKH,UAAU,cACb,4BACEsB,SAAUxB,EACVyB,QAAS,WAxDfxB,GAAiB,GACjBN,EAAUD,EAAS,KACnBK,EAAOD,EAAM,IACbD,EAAeD,EAAc,IAE7B8B,YAAW,WACT/B,EAAUD,GACVK,EAAOD,GACPD,EAAeD,KACd,KAEH8B,YAAW,WACTzB,GAAiB,KAChB,QAyCC,iBC1DY0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3092ef22.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/party.1ce5e503.svg\";","module.exports = __webpack_public_path__ + \"static/media/corp.19142cf2.png\";","module.exports = __webpack_public_path__ + \"static/media/mana.ed990a91.png\";","module.exports = __webpack_public_path__ + \"static/media/gura.dfa24db1.png\";","import React, { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport party from \"./images/party.svg\";\nimport body from \"./images/corp.png\";\nimport hand from \"./images/mana.png\";\nimport mouth from \"./images/gura.png\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [rotate, setRotate] = useState(0);\n  const [rotateMouth, setRotateMouth] = useState(0);\n  const [top, setTop] = useState(116);\n  const [disableButton, setDisableButton] = useState(false);\n\n  const goToInitialState = () => {\n    setDisableButton(true);\n    setRotate(rotate + 105);\n    setTop(top + 15);\n    setRotateMouth(rotateMouth - 40);\n\n    setTimeout(function () {\n      setRotate(rotate);\n      setTop(top);\n      setRotateMouth(rotateMouth);\n    }, 3000);\n\n    setTimeout(function () {\n      setDisableButton(false);\n    }, 6001);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <img src={body} alt=\"body\" className=\"body\" />\n        <motion.img\n          style={{ originX: 0.7, zIndex: -1 }}\n          animate={{ rotate: rotate }}\n          transition={{ duration: 3 }}\n          src={hand}\n          alt=\"hand\"\n          className=\"hand\"\n        />\n        <motion.img\n          src={mouth}\n          style={{ originX: 0.6, originY: 0.5 }}\n          animate={{ rotate: rotateMouth }}\n          transition={{ duration: 3 }}\n          alt=\"mouth\"\n          className=\"mouth\"\n        />\n      </div>\n      <motion.div\n        className=\"card\"\n        animate={{\n          scale: [1, 1.4, 1.4, 1, 1],\n          rotate: [0, 0, 270, 270, 0],\n        }}\n        transition={{\n          duration: 2,\n          ease: \"easeInOut\",\n          times: [0, 0.2, 0.5, 0.8, 1],\n          loop: Infinity,\n          repeatDelay: 1,\n        }}\n      >\n        <img src={party} alt=\"Party\" />\n      </motion.div>\n      <div className=\"button-div\">\n        <button\n          disabled={disableButton}\n          onClick={() => {\n            goToInitialState();\n          }}\n        >\n          HAI NOROC!\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}